%% Team SHAF
%  MATLAB port of rep detection and fatigue detection algorithm

%% Initialization
clf
clc
clear

% Debugging output control
DEBUG_ON = 1;

% Defining "Constants"
ADC_BITS = 1024;
VOLTAGE_SOURCE = 5;
FATIGUE_PERCENT = 0.17;
BASELINE = 50; 

% Quasi-Constant, needs calibration for each subject.
% Choosing value for now until programmatic solution developed
THRESHOLD_VOLTAGE = 100;

% Variables
repEdge = 0;  % 1=pos_edge; 0=neg_edge 
repCount = 0;
maxVoltage = 0;
currentPeakVoltage = ADC_BITS - 1;
previousPeakVoltage = ADC_BITS - 1;
tempPercent = 0.0;
fatigueFlag = 0;
repFatigueDetectedOn = 0;
sampleFatigueDetectedOn = 0;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    N:\SHAF\Capstone\data\arduino\s1_L1_G_M_Y_25_25.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/04/27 11:41:58

%% Initialize variables.
filename = 'N:\SHAF\Capstone\data\arduino\s1_L1_G_M_Y_25_25.txt';
startRow = 7;
endRow = 6451;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*30s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow-startRow+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{1};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 1) = numbers{1};
            raw{row, 1} = numbers{1};
        end
    catch me
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
data = cell2mat(raw(:, 1));

%% Clear temporary variables
clearvars filename startRow endRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%% Convert floating voltage to integer voltage
data = round(data / VOLTAGE_SOURCE * ADC_BITS);

if DEBUG_ON
    for i = 1:numel(data)
       if isnan(data(i))
           fprintf('sample %d = NaN\n',i)
       end
    end
end

%% Create plot and hold on to add debugging marks
plot(data)
hold on

%% Detect reps and fatigue
for i = 1:numel(data)
    if data(i) > BASELINE
        repEdge = 1;
        if data(i) > maxVoltage
            maxVoltage = data(i);
        else
            continue
        end
    else
        if maxVoltage >= THRESHOLD_VOLTAGE  
            if repEdge
                repCount = repCount + 1;
                plot(i,data(i),'rs')
                repEdge = 0;
                maxVoltage = 0;
                if DEBUG_ON
                    fprintf('rep %d detected on sample %d\n',repCount,i)
                end  
            end          
            previousPeakVoltage = currentPeakVoltage;
            currentPeakVoltage = maxVoltage;
            tempPercent = (currentPeakVoltage/previousPeakVoltage) - 1;
            if tempPercent > FATIGUE_PERCENT
                repFatigueDetectedOn = repCount;
                sampleFatigueDetectedOn = i;
                fatigueFlag = 1;
                if DEBUG_ON
                    fprintf('fatigue detected on sample %d\n',i)
                end
            end
        else
            continue
        end
    end
end
